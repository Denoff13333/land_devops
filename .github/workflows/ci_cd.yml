name: ci_cd.yml

on:
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened, ready_for_review, closed, labeled, unlabeled ]

permissions:
  contents: write
  pull-requests: write
  actions: read
  packages: write

env:
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  DOCKERHUB_REPO: ${{ vars.DOCKERHUB_REPO }}

jobs:
  
  info:
    if: github.event.action != 'closed'
    name: (INF) Print INFORMATION
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "PR #${{ github.event.number }}"
          echo "From: ${{ github.event.pull_request.head.ref }}"
          echo "To  : ${{ github.base_ref }}"

  
  tst_unit:
    if: github.event.action != 'closed'
    name: (TST) Unit tests
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Run unit tests (stub) ..."
          sleep 2
          echo "OK"

  tst_smoke:
    if: github.event.action != 'closed'
    name: (TST) Smoke tests
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Run smoke tests (stub) ..."
          sleep 2
          echo "OK"

  
  sec_sast:
    if: github.event.action != 'closed'
    name: (SEC) / SAST
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Static security scan (stub) ..."
          sleep 2
          echo "OK"

  sec_dast:
    if: github.event.action != 'closed'
    name: (SEC) / DAST
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Dynamic security scan (stub) ..."
          sleep 2
          echo "OK"

  sec_av:
    if: github.event.action != 'closed'
    name: (SEC) / AV
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Antivirus scan (stub) ..."
          sleep 2
          echo "OK"

  
  mark_tests_passed:
    if: ${{ github.event.action != 'closed'
          && needs.tst_unit.result == 'success'
          && needs.tst_smoke.result == 'success'
          && needs.sec_sast.result == 'success'
          && needs.sec_dast.result == 'success' }}
    name: (LAB) Mark tests passed
    runs-on: ubuntu-latest
    needs: [ tst_unit, tst_smoke, sec_sast, sec_dast ]
    steps:
      - name: Add 'test-passed' label to PR
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: test-passed

  mark_sec_passed:
    if: ${{ github.event.action != 'closed'
          && needs.sec_sast.result == 'success'
          && needs.sec_dast.result == 'success'
          && needs.sec_av.result == 'success' }}
    name: (LAB) Mark security passed
    runs-on: ubuntu-latest
    needs: [ sec_sast, sec_dast, sec_av ]
    steps:
      - name: Add 'sec-passed' label to PR
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: sec-passed

  
  gates:
    if: github.event.action != 'closed'
    name: (ISC) / collect statuses
    runs-on: ubuntu-latest
    needs: [ info ]
    steps:
      - name: Wait tests & security
        uses: lewagon/wait-on-check-action@v1.3.3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          running-workflow-name: ci_cd.yml
          check-regexp: '^\((TST|SEC)\)'
          allowed-conclusions: success
          ref: ${{ github.event.pull_request.head.sha }}

 
  version:
    if: github.event.action != 'closed'
    name: (VER) Version UP
    runs-on: ubuntu-latest
    needs: [ gates ]
    steps:
      - name: Checkout PR commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Ensure PR branch
        run: |
          BR='${{ github.event.pull_request.head.ref }}'
          git fetch origin "$BR" --depth=1 || true
          git checkout -B "$BR" "origin/$BR" 2>/dev/null || git checkout -b "$BR"
          git branch --set-upstream-to="origin/$BR" "$BR" 2>/dev/null || true
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"

      - name: Decide bump type (by PR labels)
        id: decide
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR=${{ github.event.pull_request.number }}
          REPO=${{ github.repository }}
          LABELS=$(gh api repos/$REPO/issues/$PR/labels --jq '.[].name' | tr '\n' ' ')
          echo "PR labels: $LABELS"
          if echo "$LABELS" | grep -qw minor ; then
            echo "type=minor" >> "$GITHUB_OUTPUT"
          elif echo "$LABELS" | grep -qw patch ; then
            echo "type=patch" >> "$GITHUB_OUTPUT"
          else
            echo "ERROR: Добавь к PR одну из меток: 'minor' или 'patch'."
            exit 1
          fi

      - name: Bump version
        id: bump
        run: bash .github/scripts/version.sh "${{ steps.decide.outputs.type }}"

      - name: Commit version file
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add version.txt
          git commit -m "chore: bump version to $(cat version.txt)" || echo "No changes"
          git push origin HEAD:'${{ github.event.pull_request.head.ref }}'

  
  changelog:
    if: github.event.action != 'closed'
    name: (VER) Changelog UP
    runs-on: ubuntu-latest
    needs: [ version ]
    steps:
      - name: Checkout PR commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Ensure PR branch
        run: |
          BR='${{ github.event.pull_request.head.ref }}'
          git fetch origin "$BR" --depth=1 || true
          git checkout -B "$BR" "origin/$BR" 2>/dev/null || git checkout -b "$BR"
          git branch --set-upstream-to="origin/$BR" "$BR" 2>/dev/null || true
          echo "On branch: $(git rev-parse --abbrev-ref HEAD)"

      - name: Prepare changelog
        run: |
          PR='${{ github.event.number }}'
          BR='${{ github.event.pull_request.head.ref }}'
          VER=$(cat version.txt)
          bash .github/scripts/changelog.sh "$VER" "$BR" "$PR"

      - name: Commit changelog
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add CHANGELOG.md
          git commit -m "docs: update changelog for v$(cat version.txt)" || echo "No changes"
          git push origin HEAD:'${{ github.event.pull_request.head.ref }}'

  
  build:
    if: github.event.action != 'closed'
    name: (BUILD) / build
    runs-on: ubuntu-latest
    needs: [ changelog ]
    steps:
      - uses: actions/checkout@v4

      - name: Read & sanitize version
        id: ver
        run: |
          VER=$(tr -d '\r\n[:space:]' < version.txt)
          echo "val=$VER" >> "$GITHUB_OUTPUT"
          echo "Version: '$VER'"

      - name: Make docker tag
        id: tag
        run: |
          REPO=$(printf "%s" "${{ vars.DOCKERHUB_REPO }}" | tr -d '[:space:]')
          TAG="$REPO:v${{ steps.ver.outputs.val }}"
          echo "full=$TAG" >> "$GITHUB_OUTPUT"
          echo "TAG=$TAG"

      - name: Login DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.tag.outputs.full }}

      - name: Update DockerHub description and README
        uses: peter-evans/dockerhub-description@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ vars.DOCKERHUB_REPO }}
          readme-filepath: ./README.md

      - name: Label PR "dockerhub"
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: dockerhub

  
  notify:
    if: github.event.action != 'closed'
    name: (TG) Notify final
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - uses: actions/checkout@v4
      - name: Telegram notify
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          DOCKERHUB_REPO: ${{ vars.DOCKERHUB_REPO }}
        run: |
          VER=$(tr -d '\r\n[:space:]' < version.txt)
          bash .github/scripts/notify_telegram.sh \
            "${{ github.event.repository.name }}" \
            "$VER" \
            "${{ github.event.number }}" \
            "${DOCKERHUB_REPO}"

  
  deploy:
    
    if: >
      github.event.action != 'closed' &&
      contains(toJson(github.event.pull_request.labels), 'PROD')
    name: Deploy / PROD
    runs-on: self-hosted
    needs: [ notify ]
    environment: prod
    steps:
      - uses: actions/checkout@v4

      - name: Read version
        id: ver
        shell: bash
        run: |
          VER=$(tr -d '\r\n[:space:]' < version.txt)
          echo "val=$VER" >> "$GITHUB_OUTPUT"

      - name: Deploy to self-hosted (PowerShell)
        shell: pwsh
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN:   ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          $ver = "${{ steps.ver.outputs.val }}"
          $image = "${{ vars.DOCKERHUB_REPO }}:v$ver"
          ./.github/scripts/deploy.ps1 -Image $image

  
  release:
    if: github.event.action == 'closed' && github.event.pull_request.merged == true
    name: Deploy / create release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create tag & release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v$(cat version.txt)
          name: Релиз v$(cat version.txt)
          body_path: CHANGELOG.md
